<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <!--
        See http://checkstyle.sourceforge.net/checks.html for a detailed
        description of each check.
    -->

    <property name="severity" value="${checkstyle.severity}" default="error"/>

    <!-- Do not allow tab characters in source code -->
    <module name="FileTabCharacter">
        <property name="fileExtensions" value="java, xml"/>
    </module>

    <!-- Require a package-info.java file for each package containing classes -->
    <module name="JavadocPackage"/>

    <!-- File must end with a newline -->
    <module name="NewlineAtEndOfFile">
        <property name="fileExtensions" value="java, xml"/>
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="\r?\n[\t ]*\r?\n[\t ]*\r?\n"/>
        <property name="fileExtensions" value="java,xml,properties"/>
        <property name="message" value="Unnecessary consecutive lines"/>
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="/\*\*\W+\* +\p{javaLowerCase}"/>
        <property name="fileExtensions" value="java"/>
        <property name="message" value="First sentence in a comment should start with a capital letter"/>
    </module>
    
    <module name="TreeWalker">
        <property name="severity" value="${checkstyle.severity}" default="error"/>

        <!-- Abstract class must start with "Abstract" or end with "Factory" -->
        <module name="AbstractClassName">
            <property name="ignoreModifier" value="true"/>
        </module>

        <!-- No "{}" for single value annotations, no empty parenthesis, no trailing commas -->
        <module name="AnnotationUseStyle"/>

        <!-- Require trailing comma on multi-line array initialization -->
        <module name="ArrayTrailingComma"/>

        <!-- Enforce Java-style array declarations (e.g. String[] args) -->
        <module name="ArrayTypeStyle"/>

        <!-- Disallow "*" imports except for certain testing packages -->
        <module name="AvoidStarImport">
            <property name="excludes"
                      value="org.junit.Assert,org.testng.Assert,org.hamcrest.MatcherAssert,org.hamcrest.Matchers,org.mockito.Mockito,org.springframework.test.web.servlet.request.MockMvcRequestBuilders,org.springframework.test.web.servlet.result.MockMvcResultMatchers,org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors,org.springframework.test.web.client.ExpectedCount,org.springframework.test.web.client.match.MockRestRequestMatchers,org.springframework.test.web.client.response.MockRestResponseCreators"/>
        </module>

        <!-- No more than 10 "&&", "||", "&", "|" and "^" operators in an expression -->
        <module name="BooleanExpressionComplexity">
            <property name="max" value="10"/>
        </module>

        <!-- All static final members must be all uppercase and underscores -->
        <module name="ConstantName"/>

        <!-- Classes defining equals(T a) must also override equals(Object obj) -->
        <module name="CovariantEquals"/>

        <!-- Declarations must be in the order:
            1. Static member variables in the order: public, protected, package, private
            2. Instance member variables in the order:  public, protected, package, private
            3. Constructors
            4. Methods
        -->
        <module name="DeclarationOrder"/>

        <!-- The "default" clause in a switch must come last -->
        <module name="DefaultComesLast"/>

        <!-- Do not allow empty blocks -->
        <module name="EmptyBlock"/>

        <!-- Requires a space before ";" in "for" empty initializer (e.g. for ( ; count < 10; count++)) -->
        <module name="EmptyForInitializerPad">
            <property name="option" value="space"/>
        </module>

        <!-- Requires a space before ";" in "for" empty iterator (e.g. for (count = 0; count < 10; )) -->
        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
        </module>

        <!-- Disallow standalone ";" -->
        <module name="EmptyStatement"/>

        <!-- At a minimum methods of package scope and higher must have a Javadoc comment.
            Setters and getters are excluded (but should have them to document edge cases).
        -->
        <module name="JavadocMethod">
            <property name="scope" value="package"/>
            <property name="tokens" value="METHOD_DEF"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>

        <!-- Check for empty Javadoc, missing "." at end of first sentence, bad HTML, etc. -->
        <module name="JavadocStyle">
            <property name="checkEmptyJavadoc" value="true"/>
        </module>

        <!-- Javadoc comments required for all class and interface definitions -->
        <module name="JavadocType"/>

        <!-- The "{" goes on the end of the line (e.g. "if (exists) {") -->
        <module name="LeftCurly">
            <property name="option" value="eol"/>
        </module>

        <!-- Lines cannot be longer than 300 characters -->
        <module name="LineLength">
            <property name="max" value="300"/>
        </module>

        <!-- Local final variables must be camel case starting with a lowercase letter -->
        <module name="LocalFinalVariableName"/>

        <!-- Local variables must be camel case starting with a lowercase letter -->
        <module name="LocalVariableName"/>

        <!-- Numbers other than -1, 0, 1, and 2 must be defined as a constant except in hashCode methods and annotations -->
        <module name="MagicNumber">
            <property name="ignoreHashCodeMethod" value="true"/>
            <property name="ignoreAnnotation" value="true"/>
            <message key="magic.number" value="Replace magic number ''{0}'' with a semantically meaningful constant"/>
        </module>

        <!-- Non-static fields are camel case starting with a lowercase letter -->
        <module name="MemberName"/>

        <!-- Maximum number of method lines is 175, not counting empty lines and single line comments -->
        <module name="MethodLength">
            <property name="max" value="175"/>
            <property name="countEmpty" value="false"/>
        </module>

        <!-- Method names are camel case starting with a lower case letter -->
        <module name="MethodName"/>

        <!-- No space between method/ctor name/call and the left parenthesis (e.g. Foo()) -->
        <module name="MethodParamPad"/>

        <!-- When the Deprecated annotation is used, the @deprecated Javadoc tag must be used and vice versa -->
        <module name="MissingDeprecated"/>

        <!-- The @Override annotation must be present when the {@inheritDoc} Javadoc tag is present -->
        <module name="MissingOverride"/>

        <!-- Switch statements must have a "default" clause -->
        <module name="MissingSwitchDefault"/>

        <!-- Disallow modification of a "for" loop control variable -->
        <module name="ModifiedControlVariable"/>

        <!-- Modifiers must be specified in the order:
            public, protected, private
            abstract
            static
            final
            transient
            volatile
            synchronized
            native
            strictfp
        -->
        <module name="ModifierOrder"/>

        <!-- One variable declaration per line -->
        <module name="MultipleVariableDeclarations"/>

        <!-- Exception classes must be immutable (i.e. only final fields) -->
        <module name="MutableException">
            <property name="format" value="^.*Exception$"/>
        </module>

        <!-- Curly braces are required around all code blocks (e.g. in an "if" block) -->
        <module name="NeedBraces"/>

        <!-- No finalize() methods -->
        <module name="NoFinalizer"/>

        <!-- No whitespace after "~", pre dec, ".", pre inc, "!", unary "-", unary "+", (type) -->
        <module name="NoWhitespaceAfter">
            <property name="allowLineBreaks" value="false"/>
            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS,TYPECAST"/>
        </module>

        <!-- No whitespace before ";", post dec, post inc -->
        <module name="NoWhitespaceBefore"/>

        <!-- Operator comes at the start of wrapped expressions -->
        <module name="OperatorWrap"/>

        <!-- The file name must match the outermost class name -->
        <module name="OuterTypeFilename"/>

        <!-- Package level annotations must be in the package-info.java file -->
        <module name="PackageAnnotation"/>

        <!-- Every class needs a package declaration and it must match the directory hierarchy -->
        <module name="PackageDeclaration"/>

        <!-- Package names are camel case starting with a lowercase letter with "." separators -->
        <module name="PackageName"/>

        <!-- Cannot assign a value to a constructor or method parameter -->
        <module name="ParameterAssignment"/>

        <!-- Parameter names are camel case starting with a lower case letter -->
        <module name="ParameterName"/>

        <!-- No more than 40 parameters in a method or constructor -->
        <module name="ParameterNumber">
            <property name="max" value="40"/>
        </module>

        <!-- The "else", "catch", "finally" must be on the same line as "}" -->
        <module name="RightCurly">
            <property name="option" value="same"/>
        </module>

        <!-- Flag unnecessarily complicated boolean expressions (e.g. if (b == true)) -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Do not test a boolean to return "true" or "false" -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Static variables are camel case starting with a lowercase letter -->
        <module name="StaticVariableName"/>

        <!-- Ensures that "==" and "!=" are not used with string literals -->
        <module name="StringLiteralEquality"/>

        <!-- Detects "TODO:" as an information message -->
        <module name="TodoComment">
            <property name="severity" value="info"/>
        </module>

        <!-- No space after the "(" and before the ")" in a type cast -->
        <module name="TypecastParenPad"/>

        <!-- Type names are camel case starting with an uppercase letter -->
        <module name="TypeName"/>

        <!-- Flag imports that are not required -->
        <module name="UnusedImports"/>

        <!-- Ensures that long constants are defined with an uppercase "L" -->
        <module name="UpperEll"/>

        <!-- Whitespace must be specified after a comma or semicolon -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA,SEMI"/>
        </module>

        <!-- Whitespace must be specified operators, assignments, etc. -->
        <module name="WhitespaceAround"/>


    </module>

    <!-- Allow suppression of Checkstyle issues using trailing SUPPRESS CHECKSTYLE comment -->
    <module name="SuppressWithNearbyCommentFilter"/>

    <module name="SuppressWithNearbyCommentFilter">
        <property name="commentFormat" value="CHECKSTYLE DISABLE ([\w\|]+) FOR (-?\d+) LINES"/>
        <property name="checkFormat" value="$1"/>
        <property name="influenceFormat" value="$2"/>
    </module>

    <!-- Allow suppression of Checkstyle issues using CHECKSTYLE:OFF and CHECKSTYLE:ON comments -->
    <module name="SuppressionCommentFilter"/>
</module>
